```{python}
import numpy as np
from scipy.sparse import csr_matrix
import altair as alt
import pandas as pd

def utility1(y: int) -> float:
    return 2 * y ** (1/2)
def marginal_utility1(y):
    return np.where(y > 0, y ** (-0.5), np.inf)

def utility2(y: int) -> float:
    return 5 * y - 0.05 * y ** 2
def marginal_utility2(y: int) -> float:
    return 5 - 0.1 * y

# Set up starting values
stock = 1000

discount_rate = 0.05
delta = 1 / (1 + discount_rate)

N = 501 # number of states
nA = 501 # number of actions
step_size = stock / (N - 1)

# action space is the same as before
action_space = np.linspace(0, stock, nA)

# create statespace even over the squre root of the action space
state_space = np.linspace(0, stock ** 0.5, N) ** 2

# constant on the columns, state space on the rows
state_space_matrix = np.tile(state_space.reshape(N, 1), (1, nA)) # N x nA

# constant on the rows, action space on the columns
action_space_matrix = np.tile(action_space.reshape(1, nA), (N, 1)) # N x nA
feasible_actions = action_space_matrix <= state_space_matrix

utility_matrix1 = np.where(feasible_actions, 
                            utility1(action_space_matrix), -1e10)    
utility_matrix2 = np.where(feasible_actions,
                                utility2(action_space_matrix), -1e10)

utility_matrix1_flat = utility_matrix1.flatten() # N * nA 1D array to use in Bellman with trnasition matrix
utility_matrix2_flat = utility_matrix2.flatten()


update_state_matrix = state_space_matrix - action_space_matrix
```

```{python}
# make sparse transition matrix
row_indices = []
col_indices = []
data = []

for i in range(N):  # state index
    for j in range(nA):  # action index
        if feasible_actions[i, j]:
            current_state = state_space[i]
            action = action_space[j]
            next_state = current_state - action

            row_index = i * nA + j  # row index for (state, action)
            
            if next_state in state_space:
                next_state_index = np.where(state_space == next_state)[0][0]
                col_indices.append(next_state_index)
                row_indices.append(row_index)
                data.append(1.0)
            else:
                if next_state <= state_space[0]:
                    next_state_index_low = 0
                    next_state_index_high = 0
                    weight_low = 1.0
                    weight_high = 0.0
                elif next_state >= state_space[-1]:
                    next_state_index_low = N - 1
                    next_state_index_high = N - 1
                    weight_low = 1.0
                    weight_high = 0.0
                else:
                    next_state_index_low = np.searchsorted(state_space, next_state, side='right') - 1
                    next_state_index_high = next_state_index_low + 1

                    s_low = state_space[next_state_index_low]
                    s_high = state_space[next_state_index_high]

                    weight_high = (next_state - s_low) / (s_high - s_low)
                    weight_low = 1.0 - weight_high

                row_indices.extend([row_index, row_index])
                col_indices.extend([next_state_index_low, next_state_index_high])
                data.extend([weight_low, weight_high])

transition_matrix = csr_matrix((data, (row_indices, col_indices)), shape=(N * nA, N))

# Bellman Function
def bellman(v, U_flat, transition_matrix, delta, N, nA):
    v_next = transition_matrix.dot(v)  # (N * nA,)
    B_flat = U_flat + delta * v_next   # (N * nA,)
    B_sa = B_flat.reshape(N, nA)       # (N, nA)
    return B_sa

# Value Function Iteration
def value_function_iteration(U_flat, transition_matrix, delta, N, nA, tolerance, max_iterations):
    v = np.zeros(N)
    for iteration in range(max_iterations):
        B_sa = bellman(v, U_flat, transition_matrix, delta, N, nA)
        v_new = np.max(B_sa, axis=1)
        policy = np.argmax(B_sa, axis=1)
        diff = np.max(np.abs(v_new - v))
        if diff < tolerance:
            print(f'Converged in {iteration + 1} iterations')
            break
        v = v_new
    else:
        print('Did not converge within max iterations')
    return v, policy

# Get Optimal Transition Matrix
def get_optimal_transition_matrix(N, nA, transition_matrix, C):
    row_indices = []
    col_indices = []
    data = []

    for i in range(N):
        optimal_action = C[i]
        row_index = i * nA + optimal_action
        row = transition_matrix.getrow(row_index)
        cols = row.indices
        probs = row.data
        for col, prob in zip(cols, probs):
            if prob > 0:
                row_indices.append(i)
                col_indices.append(col)
                data.append(prob)

    Topt = csr_matrix((data, (row_indices, col_indices)), shape=(N, N))
    return Topt

# Value function iteration function
max_iterations = 1000
np.random.seed(454)
# start with value function  of zeros
value_function = np.zeros(N)
tolerance = 1e-8

# Solve for utility function 1
print("Solving for utility function 1:")
v_u1, C_u1 = value_function_iteration(utility_matrix1_flat, transition_matrix, delta, N, nA, tolerance, max_iterations)

# Part (h) Find optimal transition matrix
Topt_u1 = get_optimal_transition_matrix(N, nA, transition_matrix, C_u1) 

print(Topt_u1.shape)

# Solve for utility function 2
print("Solving for utility function 2:")
v_u2, C_u2 = value_function_iteration(utility_matrix2_flat, transition_matrix, delta, N, nA, tolerance, max_iterations)

# Part (h) Find optimal transition matrix
Topt_u2 = get_optimal_transition_matrix(N, nA, transition_matrix, C_u2)

```


```{python}

def simulation(T, starting_stock, price_function, C, action_space, state_space):
    remaining_stock = starting_stock
    extraction_path = []
    stock_path = []
    price_path = []
    for t in range(T):
        stock_path.append(remaining_stock)
        current_state = np.searchsorted(state_space, remaining_stock, side='right') - 1
        if current_state < 0 or current_state >= N:
            print("Error: State index out of bounds")
            break
        action_index = C[current_state]
        action = action_space[action_index]
        extraction_path.append(action)
        if action == 0:
            print(f"Action is zero at time {t}, remaining stock {remaining_stock}")
        price = price_function(action)
        price_path.append(price)
        remaining_stock -= action
        if remaining_stock < 0:
            break
    return extraction_path, stock_path, price_path

def make_extraction_plot(extraction_path, stock_path, price_path):
    periods = np.arange(1, len(extraction_path) + 1)
    df = pd.DataFrame({
        'Period': periods,
        'Extraction': extraction_path,
        'Price': price_path,
        'Stock': stock_path
    })

    extraction_chart = alt.Chart(df).mark_line(color='blue').encode(
        x=alt.X('Period', axis=alt.Axis(title='Period')),
        y=alt.Y('Extraction', axis=alt.Axis(title='Extraction'))
    ).properties(
        width=300,
        height=200
    )

    price_chart = alt.Chart(df).mark_line(color='red').encode(
        x=alt.X('Period', axis=alt.Axis(title='Period')),
        y=alt.Y('Price', axis=alt.Axis(title='Price'), scale=alt.Scale(zero=False))
    ).properties(
        width=300,
        height=200
    )

    combined_chart = alt.vconcat(extraction_chart, price_chart)
    return combined_chart

# Part (i) Simulate the model for t=80 periods
T = 80

# Simulation for Utility Function 1
extraction_path, stock_path, price_path = simulation(
    T, stock, marginal_utility1, C_u1, action_space, state_space
)

# round prices to 3 decimal places
price_path = np.round(price_path, 3)
chart_1 = make_extraction_plot(extraction_path, stock_path, price_path)

# Simulation for Utility Function 2
extraction_path, stock_path, price_path = simulation(
    T, stock, marginal_utility2, C_u2, action_space, state_space
)
chart_2 = make_extraction_plot(extraction_path, stock_path, price_path)

# Display the charts
chart_1 | chart_2
```